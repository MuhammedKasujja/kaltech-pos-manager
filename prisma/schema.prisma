generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  // provider = "mysql"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int          @id @default(autoincrement())
  accountKey        String
  expiresAt         Int?
  devices           SyncDevice[]
  isVerifiedAccount Boolean      @default(false)
  isTrial           Boolean      @default(true)
  uploads           DataUpload[]
  plan              String
  trialStarted      DateTime
  planStarted       DateTime
  trialDuration     Int
  planExpires       DateTime
  deletedAt         DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  company           Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId         Int          @unique
  licence           Licence[]
}

model DataUpload {
  id         Int                @id @default(autoincrement())
  deviceId   String
  userId     String
  accountKey String
  data       Json
  updateId   String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  account    Account?           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  Int?
  uploads    DataUploadDevice[]
  // TODO: add relationship for device making upload
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SyncDevice {
  id           Int                @id @default(autoincrement())
  userId       String
  deviceId     String             @unique
  userName     String             
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  account      Account?           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId    Int?
  uploads      DataUploadDevice[]
  lastSyncDate DateTime?
  isActive     Boolean            @default(true)
}

model Company {
  id             Int          @id @default(autoincrement())
  name           String
  email          String?      @unique
  phone          String       @unique
  admin          CompanyAdmin @relation(fields: [companyAdminId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  companyAdminId Int          @unique
  account        Account?
}

model CompanyAdmin {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String?  @unique
  phone     String?  @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company?
}

model Licence {
  id             Int           @id @default(autoincrement())
  licenceKey     String
  days           Int
  isApplied      Boolean       @default(false)
  appliedAt      DateTime?
  deletedAt      DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  account        Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId      Int
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId Int?
}

model DataUploadDevice {
  uploadDeviceId Int
  dataUploadId   Int
  dataUpload     DataUpload @relation(fields: [dataUploadId], references: [id], onDelete: Cascade)
  device         SyncDevice @relation(fields: [uploadDeviceId], references: [id], onDelete: Cascade)

  @@id([uploadDeviceId, dataUploadId]) // composite primary key
}

enum SubscriptionPlan {
  TRIAL
  PRO
  ENTERPRISE
  WHITE_LABEL
}

enum SubscriptionType {
  ACCOUNT_SETUP
  DATA_SYNC
}

model Subscription {
  id              Int              @id @default(autoincrement())
  name            String
  tagline         String @default("")
  planDays        Int
  plan            SubscriptionPlan
  type            SubscriptionType
  monthylyPrice   Float
  yearlyPrice     Float
  oldYearlyPrice  Float
  oldMonthlyPrice Float
  maxSyncDevices  Int
  features        String[] @default([])
  deletedAt       DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  licenses        Licence[]
}
